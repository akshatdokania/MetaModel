/**
 */
package metaModel.provider;

import java.util.ArrayList;
import java.util.Collection;

import metaModel.util.MetaModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetaModelItemProviderAdapterFactory extends MetaModelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetaModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Blockchain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockchainItemProvider blockchainItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Blockchain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockchainAdapter() {
		if (blockchainItemProvider == null) {
			blockchainItemProvider = new BlockchainItemProvider(this);
		}

		return blockchainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Transaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionItemProvider transactionItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Transaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionAdapter() {
		if (transactionItemProvider == null) {
			transactionItemProvider = new TransactionItemProvider(this);
		}

		return transactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Address} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddressItemProvider addressItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Address}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddressAdapter() {
		if (addressItemProvider == null) {
			addressItemProvider = new AddressItemProvider(this);
		}

		return addressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.DApp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAppItemProvider dAppItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.DApp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAppAdapter() {
		if (dAppItemProvider == null) {
			dAppItemProvider = new DAppItemProvider(this);
		}

		return dAppItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Wallet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WalletItemProvider walletItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Wallet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWalletAdapter() {
		if (walletItemProvider == null) {
			walletItemProvider = new WalletItemProvider(this);
		}

		return walletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Player} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerItemProvider playerItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Player}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerAdapter() {
		if (playerItemProvider == null) {
			playerItemProvider = new PlayerItemProvider(this);
		}

		return playerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.GamePlayer_Manager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GamePlayer_ManagerItemProvider gamePlayer_ManagerItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.GamePlayer_Manager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGamePlayer_ManagerAdapter() {
		if (gamePlayer_ManagerItemProvider == null) {
			gamePlayer_ManagerItemProvider = new GamePlayer_ManagerItemProvider(this);
		}

		return gamePlayer_ManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.GameCore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GameCoreItemProvider gameCoreItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.GameCore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGameCoreAdapter() {
		if (gameCoreItemProvider == null) {
			gameCoreItemProvider = new GameCoreItemProvider(this);
		}

		return gameCoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.GameMinting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GameMintingItemProvider gameMintingItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.GameMinting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGameMintingAdapter() {
		if (gameMintingItemProvider == null) {
			gameMintingItemProvider = new GameMintingItemProvider(this);
		}

		return gameMintingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.SignatureValidator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignatureValidatorItemProvider signatureValidatorItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.SignatureValidator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignatureValidatorAdapter() {
		if (signatureValidatorItemProvider == null) {
			signatureValidatorItemProvider = new SignatureValidatorItemProvider(this);
		}

		return signatureValidatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.SignatureRegistry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignatureRegistryItemProvider signatureRegistryItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.SignatureRegistry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignatureRegistryAdapter() {
		if (signatureRegistryItemProvider == null) {
			signatureRegistryItemProvider = new SignatureRegistryItemProvider(this);
		}

		return signatureRegistryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Signature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignatureItemProvider signatureItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Signature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignatureAdapter() {
		if (signatureItemProvider == null) {
			signatureItemProvider = new SignatureItemProvider(this);
		}

		return signatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.ECDSA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECDSAItemProvider ecdsaItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.ECDSA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECDSAAdapter() {
		if (ecdsaItemProvider == null) {
			ecdsaItemProvider = new ECDSAItemProvider(this);
		}

		return ecdsaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Token_Manager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Token_ManagerItemProvider token_ManagerItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Token_Manager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToken_ManagerAdapter() {
		if (token_ManagerItemProvider == null) {
			token_ManagerItemProvider = new Token_ManagerItemProvider(this);
		}

		return token_ManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Token} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenItemProvider tokenItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Token}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenAdapter() {
		if (tokenItemProvider == null) {
			tokenItemProvider = new TokenItemProvider(this);
		}

		return tokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.SafeMath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SafeMathItemProvider safeMathItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.SafeMath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSafeMathAdapter() {
		if (safeMathItemProvider == null) {
			safeMathItemProvider = new SafeMathItemProvider(this);
		}

		return safeMathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.OracleClient} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OracleClientItemProvider oracleClientItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.OracleClient}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOracleClientAdapter() {
		if (oracleClientItemProvider == null) {
			oracleClientItemProvider = new OracleClientItemProvider(this);
		}

		return oracleClientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Oracle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OracleItemProvider oracleItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Oracle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOracleAdapter() {
		if (oracleItemProvider == null) {
			oracleItemProvider = new OracleItemProvider(this);
		}

		return oracleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Request} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Request}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Buffer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BufferItemProvider bufferItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Buffer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBufferAdapter() {
		if (bufferItemProvider == null) {
			bufferItemProvider = new BufferItemProvider(this);
		}

		return bufferItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Buffer_Manager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Buffer_ManagerItemProvider buffer_ManagerItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Buffer_Manager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuffer_ManagerAdapter() {
		if (buffer_ManagerItemProvider == null) {
			buffer_ManagerItemProvider = new Buffer_ManagerItemProvider(this);
		}

		return buffer_ManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.CBOR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CBORItemProvider cborItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.CBOR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCBORAdapter() {
		if (cborItemProvider == null) {
			cborItemProvider = new CBORItemProvider(this);
		}

		return cborItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Exchange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExchangeItemProvider exchangeItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Exchange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExchangeAdapter() {
		if (exchangeItemProvider == null) {
			exchangeItemProvider = new ExchangeItemProvider(this);
		}

		return exchangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Currency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurrencyItemProvider currencyItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Currency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurrencyAdapter() {
		if (currencyItemProvider == null) {
			currencyItemProvider = new CurrencyItemProvider(this);
		}

		return currencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Marketplace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarketplaceItemProvider marketplaceItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Marketplace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarketplaceAdapter() {
		if (marketplaceItemProvider == null) {
			marketplaceItemProvider = new MarketplaceItemProvider(this);
		}

		return marketplaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Orders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrdersItemProvider ordersItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Orders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrdersAdapter() {
		if (ordersItemProvider == null) {
			ordersItemProvider = new OrdersItemProvider(this);
		}

		return ordersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Item} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemItemProvider itemItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Item}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemAdapter() {
		if (itemItemProvider == null) {
			itemItemProvider = new ItemItemProvider(this);
		}

		return itemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Auction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuctionItemProvider auctionItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Auction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuctionAdapter() {
		if (auctionItemProvider == null) {
			auctionItemProvider = new AuctionItemProvider(this);
		}

		return auctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Liquidation_Manager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Liquidation_ManagerItemProvider liquidation_ManagerItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Liquidation_Manager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiquidation_ManagerAdapter() {
		if (liquidation_ManagerItemProvider == null) {
			liquidation_ManagerItemProvider = new Liquidation_ManagerItemProvider(this);
		}

		return liquidation_ManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Liquidator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiquidatorItemProvider liquidatorItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Liquidator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiquidatorAdapter() {
		if (liquidatorItemProvider == null) {
			liquidatorItemProvider = new LiquidatorItemProvider(this);
		}

		return liquidatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Reserves_Manager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Reserves_ManagerItemProvider reserves_ManagerItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Reserves_Manager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReserves_ManagerAdapter() {
		if (reserves_ManagerItemProvider == null) {
			reserves_ManagerItemProvider = new Reserves_ManagerItemProvider(this);
		}

		return reserves_ManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.DeFi_Lending_Core} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeFi_Lending_CoreItemProvider deFi_Lending_CoreItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.DeFi_Lending_Core}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeFi_Lending_CoreAdapter() {
		if (deFi_Lending_CoreItemProvider == null) {
			deFi_Lending_CoreItemProvider = new DeFi_Lending_CoreItemProvider(this);
		}

		return deFi_Lending_CoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.Data_Provider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Data_ProviderItemProvider data_ProviderItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.Data_Provider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createData_ProviderAdapter() {
		if (data_ProviderItemProvider == null) {
			data_ProviderItemProvider = new Data_ProviderItemProvider(this);
		}

		return data_ProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.DeFi_Lending_Pool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeFi_Lending_PoolItemProvider deFi_Lending_PoolItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.DeFi_Lending_Pool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeFi_Lending_PoolAdapter() {
		if (deFi_Lending_PoolItemProvider == null) {
			deFi_Lending_PoolItemProvider = new DeFi_Lending_PoolItemProvider(this);
		}

		return deFi_Lending_PoolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metaModel.DeFi_User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeFi_UserItemProvider deFi_UserItemProvider;

	/**
	 * This creates an adapter for a {@link metaModel.DeFi_User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeFi_UserAdapter() {
		if (deFi_UserItemProvider == null) {
			deFi_UserItemProvider = new DeFi_UserItemProvider(this);
		}

		return deFi_UserItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (blockchainItemProvider != null)
			blockchainItemProvider.dispose();
		if (blockItemProvider != null)
			blockItemProvider.dispose();
		if (transactionItemProvider != null)
			transactionItemProvider.dispose();
		if (addressItemProvider != null)
			addressItemProvider.dispose();
		if (dAppItemProvider != null)
			dAppItemProvider.dispose();
		if (walletItemProvider != null)
			walletItemProvider.dispose();
		if (userItemProvider != null)
			userItemProvider.dispose();
		if (playerItemProvider != null)
			playerItemProvider.dispose();
		if (gamePlayer_ManagerItemProvider != null)
			gamePlayer_ManagerItemProvider.dispose();
		if (gameCoreItemProvider != null)
			gameCoreItemProvider.dispose();
		if (gameMintingItemProvider != null)
			gameMintingItemProvider.dispose();
		if (signatureValidatorItemProvider != null)
			signatureValidatorItemProvider.dispose();
		if (signatureRegistryItemProvider != null)
			signatureRegistryItemProvider.dispose();
		if (signatureItemProvider != null)
			signatureItemProvider.dispose();
		if (ecdsaItemProvider != null)
			ecdsaItemProvider.dispose();
		if (token_ManagerItemProvider != null)
			token_ManagerItemProvider.dispose();
		if (tokenItemProvider != null)
			tokenItemProvider.dispose();
		if (safeMathItemProvider != null)
			safeMathItemProvider.dispose();
		if (oracleClientItemProvider != null)
			oracleClientItemProvider.dispose();
		if (oracleItemProvider != null)
			oracleItemProvider.dispose();
		if (requestItemProvider != null)
			requestItemProvider.dispose();
		if (bufferItemProvider != null)
			bufferItemProvider.dispose();
		if (buffer_ManagerItemProvider != null)
			buffer_ManagerItemProvider.dispose();
		if (cborItemProvider != null)
			cborItemProvider.dispose();
		if (exchangeItemProvider != null)
			exchangeItemProvider.dispose();
		if (currencyItemProvider != null)
			currencyItemProvider.dispose();
		if (marketplaceItemProvider != null)
			marketplaceItemProvider.dispose();
		if (ordersItemProvider != null)
			ordersItemProvider.dispose();
		if (itemItemProvider != null)
			itemItemProvider.dispose();
		if (auctionItemProvider != null)
			auctionItemProvider.dispose();
		if (liquidation_ManagerItemProvider != null)
			liquidation_ManagerItemProvider.dispose();
		if (liquidatorItemProvider != null)
			liquidatorItemProvider.dispose();
		if (reserves_ManagerItemProvider != null)
			reserves_ManagerItemProvider.dispose();
		if (deFi_Lending_CoreItemProvider != null)
			deFi_Lending_CoreItemProvider.dispose();
		if (data_ProviderItemProvider != null)
			data_ProviderItemProvider.dispose();
		if (deFi_Lending_PoolItemProvider != null)
			deFi_Lending_PoolItemProvider.dispose();
		if (deFi_UserItemProvider != null)
			deFi_UserItemProvider.dispose();
	}

}
